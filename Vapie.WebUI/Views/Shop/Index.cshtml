@model ShopViewModel
@{
    ViewData["Title"] = "Index";
}
<div class="page-header breadcrumb-wrap">
    <div class="container">
        <div class="breadcrumb">
            <a class="me-1" asp-action="Index" asp-controller="Home"><i class="fa-solid fa-house me-1"></i>Ana səhifə</a>
            <a class="me-1" style="color: #FDC040;" asp-action="Index" asp-controller="Shop"><i style="color: #FDC040;" class="fa-solid fa-basket-shopping me-1"></i>Mağaza</a>
            > Bütün Məhsullar
        </div>
    </div>
</div>
<div class="col-12 d-flex">
    <nav class="py-3">
        <h3 class="text-center">Kateqoriyalar</h3>
        @Extension.GetCategoriesRaw(Model.Categories)
    </nav>
    <div class="row justify-content-end">
        <div class="col-12 py-3">
            <div class="row ">
                <div class="col-12 text-center text-uppercase">
                    <h2>Mağaza</h2>
                </div>
            </div>
            <div class="row">
                @foreach (var item in Model.PagedViewModel.Items)
                {
                    var imagePath = item.Images.FirstOrDefault(i => i.IsMain == true).ImagePath;
                    <div class="col-xl-3 col-lg-4 col-sm-6 my-3">
                        <div class="col-12 bg-white text-center h-100 product-item">
                            <div class="row h-100">
                                <div class="col-12 p-0 mb-3">
                                    <a asp-action="singleproduct" asp-route-id="@item.Id" asp-route-categoryId="@item.CategoryId">
                                        <img src="~/uploads/images/@imagePath" class="img-fluid">
                                    </a>
                                </div>
                                <div class="col-12 mb-3">
                                    <a asp-action="singleproduct" asp-route-id="@item.Id" asp-route-categoryId="@item.CategoryId" class="product-name">@item.Name</a>
                                </div>
                                <div class="col-12 mb-3">
                                    <span class="product-price">
                                        @item.Price ₼
                                    </span>
                                    <del class="old-price">@(item.OldPrice != null ? item.OldPrice + "₼" : null)</del>
                                </div>
                                <div class="col-12 mb-3 align-self-end">
                                    <button data-item-id="@item.Id" onclick="addToWishlist(event)" class="btn mb-1 btn-outline-secondary btn-sm" type="button"><i class="fas fa-heart me-2"></i>Seçilmişlərə əlavə et</button>
                                    <button data-item-id="@item.Id" onclick="addToCart(event)" class="btn btn-outline-dark" type="button"><i class="fas fa-cart-plus me-2"></i>Səbətə əlavə et</button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

    </div>
</div>
<div class="col-12">
    @Model.PagedViewModel.GetPagenation(Url, "Index")
    @*<nav aria-label="Page navigation example">
            <ul class="pagination justify-content-center">
                <li class="page-item disabled">
                    <a class="page-link" href="#" tabindex="-1" aria-disabled="true"><i class="fas fa-long-arrow-alt-left"></i></a>
                </li>
                <li class="page-item"><a class="page-link" href="#">1</a></li>
                <li class="page-item active" aria-current="page">
                    <a class="page-link" href="#">2 <span class="sr-only">(current)</span></a>
                </li>
                <li class="page-item"><a class="page-link" href="#">3</a></li>
                <li class="page-item">
                    <a class="page-link" href="#"><i class="fas fa-long-arrow-alt-right"></i></a>
                </li>
            </ul>
        </nav>*@
</div>

@section css{
    <link rel="stylesheet" href="~/assets/css/pagination.css" />
<style>
    @@media only screen and (max-width: 500px) {
  .sidenav {
    width:120px !important;
  }
}
    .sidenav {
        height: 100%;
        width: 200px;
        /*position: fixed;*/
        z-index: 1;
        top: 0;
        left: 0;
        /*background-color: #111;*/
        overflow-x: hidden;
        padding-top: 20px;
    }

        /* Style the sidenav links and the dropdown button */
        .sidenav a, .dropdown-btn {
            padding: 6px 8px 6px 16px;
            text-decoration: none;
            font-size: 20px;
            /*color: #818181;*/
            display: block;
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            cursor: pointer;
            outline: none;
        }

            /* On mouse-over */
            /*.sidenav a:hover, .dropdown-btn:hover {
                color: #f1f1f1;
            }*/

    /* Main content */
    .main {
        margin-left: 200px; /* Same as the width of the sidenav */
        font-size: 20px; /* Increased text to enable scrolling */
        padding: 0px 10px;
    }

    /* Add an active class to the active dropdown button */
    /*.active {
        background-color: green;
        color: white;
    }*/

    /* Dropdown container (hidden by default). Optional: add a lighter background color and some left padding to change the design of the dropdown content */
    .dropdown-container {
        display: none;
        background-color: #262626;
        padding-left: 8px;
    }

    /* Optional: Style the caret down icon */
    .fa-caret-down {
        float: right;
        padding-right: 8px;
    }
</style>
}
@section js{
    <script>
        var dropdown = document.getElementsByClassName("fa-caret-down");
        var i;

        for (i = 0; i < dropdown.length; i++) {
            dropdown[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var dropdownContent = this.parentElement.nextElementSibling;
                if (dropdownContent.style.display === "block") {
                    dropdownContent.style.display = "none";
                } else {
                    dropdownContent.style.display = "block";
                }
            });
        }
        function showCardCount() {
            let items = readFromBasket();
            $('#header-qty').html(items.length - 1);

        }
        showCardCount();
        function showWishlistCount() {
            let items = readFromCookie();
            $('#header-favorite').html(items.length - 1);

        }
        showWishlistCount();
        function readFromCookie() {
            return ($.cookie('cardsForCookie') || '').split(',');
        }

        function readFromBasket() {
            return ($.cookie('cards') || '').split(',');
        }
        function addToWishlist(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            let data = $(ev.currentTarget).data();
            addToCookie(data.itemId);

            console.log(readFromCookie())
        }
        function addToCookie(cardId) {
            let items = readFromCookie();
            let length = items.filter(item => item == cardId).length;
            if (length > 0) {
                toastr.warning("Bu məhsulu artıq seçilmişlərə əlavə etmisiniz!", "Uğursuz");
                return;
            }
            items.push(cardId);
            $.cookie('cardsForCookie', items.toString(), { expires: 7, path: '/' });
            $.ajax({
                success: function (response) {
                    if (response.error == true) {
                        toastr.error(response.message, "Error!");
                        return;
                    }
                    toastr.success("Successfully Added", response.message)
                    showWishlistCount();
                },
                error: function (response) {
                    toastr["error"]("Unsuccessfully", "Data has not been deleted")
                }
            })
        }
        function addToCart(ev) {
            ev.preventDefault();
            ev.stopPropagation();
            let data = $(ev.currentTarget).data();
            addToBasket(data.itemId);

            console.log(readFromBasket())
        }
        function addToBasket(cardId) {
            let items = readFromBasket();
            let length = items.filter(item => item == cardId).length;
            if (length > 0) {
                toastr.warning("Bu məhsulu artıq səbətə əlavə etmisiniz!", "Uğursuz");
                return;
            }
            items.push(cardId);
            $.cookie('cards', items.toString(), { expires: 7, path: '/' });
            $.ajax({
                success: function (response) {
                    if (response.error == true) {
                        toastr.error(response.message, "Error!");
                        return;
                    }
                    toastr.success("Successfully Added", response.message)
                    showCardCount();
                },
                error: function (response) {
                    toastr["error"]("Unsuccessfully", "Data has not been deleted")
                }
            })
        }
    </script>
}